import streamlit as st
from langchain.llms import Gemini
from langchain.chains import ConversationChain
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
import requests
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

# Gemini API 키 설정
gemini_api_key = "YOUR_GEMINI_API_KEY"

# Dall-E API 키 설정
dall_e_api_key = "YOUR_DALL_E_API_KEY"

# 동화 주제 카테고리 목록
categories = ["판타지", "전래동화", "공포", "동물", "일상"]

# Gemini LLM 초기화
llm = Gemini(api_key=gemini_api_key, model_name="models/gemini-pro")

# 대화 메모리 초기화
memory = ConversationBufferMemory()

# 대화 체인 초기화 (llm 을 Runnable 타입으로 변환)
conversation_chain = ConversationChain(
    llm=llm.run,  # llm.run 으로 변경
    memory=memory,
    verbose=True,
)

# 동화 초안 생성 함수
def generate_story_start(theme):
    prompt = f"다음 주제로 시작되는 2~3문장 동화 초안을 작성해주세요. \n주제: {theme}"
    response = conversation_chain.run(prompt)
    return response

# 다음 내용 보기 생성 함수
def generate_options(story_text):
    prompt = f"다음 동화 내용에 대한 4가지 보기를 제공해주세요.\n동화 내용: {story_text}"
    response = conversation_chain.run(prompt)
    options = response.split('\n')
    return options

# Dall-E 이미지 생성 함수
def generate_image(description):
    url = "https://api.openai.com/v1/images/generations"
    headers = {
        "Authorization": f"Bearer {dall_e_api_key}",
        "Content-Type": "application/json"
    }
    data = {
        "prompt": description,
        "n": 1,
        "size": "1024x1024"
    }
    response = requests.post(url, headers=headers, json=data)
    image_url = response.json()['data'][0]['url']
    return image_url

# PDF 출력 함수
def generate_pdf(story_text, image_url):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.setFont("Helvetica", 12)
    c.drawString(30, 750, "동화 제목: " + theme)  # 동화 제목
    c.drawString(30, 720, story_text)
    c.drawImage(image_url, 150, 200, width=300, height=300)  # 이미지 출력
    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# HTML 출력 함수
def generate_html(story_text, image_url):
    html = f"""
    <h1>{theme}</h1>
    <p>{story_text}</p>
    <img src="{image_url}" alt="동화 이미지" width="300" height="300">
    """
    return html

# Streamlit UI 구성
st.title("머그게임 기반 동화책 제작")

# 동화 주제 및 카테고리 선택
theme = st.text_input("동화 주제를 입력하세요 (예: 귀여운 팽귄 돌돌이의 모험)")
category = st.selectbox("카테고리를 선택하세요", categories)

# 동화 생성 버튼
if st.button("동화 생성"):
    # 동화 초안 생성
    story_text = generate_story_start(theme)

    # 다음 내용 보기 생성
    options = generate_options(story_text)

    # 이미지 생성
    image_url = generate_image(story_text)

    # 결과 출력
    st.write(f"**동화 초안:**\n{story_text}")
    st.write("**다음 내용 보기:**")
    for i, option in enumerate(options):
        st.write(f"{i+1}. {option}")
    st.image(image_url, width=300)

# 다음 내용 선택 및 동화 내용 추가
selected_option = st.selectbox("다음 내용을 선택하세요", options)

if st.button("다음 내용 추가"):
    # 선택된 내용을 기반으로 동화 내용 추가
    prompt = f"다음 동화 내용을 이어서 작성해주세요. \n기존 내용: {story_text} \n새로운 내용: {selected_option}"
    story_text = conversation_chain.run(prompt)

    # 다음 내용 보기 생성
    options = generate_options(story_text)

    # 이미지 생성
    image_url = generate_image(story_text)

    # 결과 출력
    st.write(f"**동화 내용:**\n{story_text}")
    st.write("**다음 내용 보기:**")
    for i, option in enumerate(options):
        st.write(f"{i+1}. {option}")
    st.image(image_url, width=300)

# 동화 완성 후 출력 옵션
if st.button("동화 완성 및 출력"):
    # PDF 출력 옵션
    if st.checkbox("PDF 출력"):
        pdf_buffer = generate_pdf(story_text, image_url)
        st.download_button(
            label="PDF 다운로드",
            data=pdf_buffer,
            file_name=f"{theme}.pdf",
            mime="application/pdf"
        )

    # HTML 출력 옵션
    if st.checkbox("HTML 출력"):
        html = generate_html(story_text, image_url)
        st.write(html, unsafe_allow_html=True)